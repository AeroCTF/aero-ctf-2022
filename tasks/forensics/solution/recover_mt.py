import random


class MT19937Recover:
    """Reverses the Mersenne Twister based on 624 observed outputs.
    The internal state of a Mersenne Twister can be recovered by observing
    624 generated outputs of it. However, if those are not directly
    observed following a twist, another output is required to restore the
    internal index.
    See also https://en.wikipedia.org/wiki/Mersenne_Twister#Pseudocode .
    """
    def unshiftRight(self, x, shift):
        res = x
        for i in range(32):
            res = x ^ res >> shift
        return res

    def unshiftLeft(self, x, shift, mask):
        res = x
        for i in range(32):
            res = x ^ (res << shift & mask)
        return res

    def untemper(self, v):
        """ Reverses the tempering which is applied to outputs of MT19937 """

        v = self.unshiftRight(v, 18)
        v = self.unshiftLeft(v, 15, 0xefc60000)
        v = self.unshiftLeft(v, 7, 0x9d2c5680)
        v = self.unshiftRight(v, 11)
        return v

    def go(self, outputs, forward=True):
        """Reverses the Mersenne Twister based on 624 observed values.
        Args:
            outputs (List[int]): list of >= 624 observed outputs from the PRNG.
                However, >= 625 outputs are required to correctly recover
                the internal index.
            forward (bool): Forward internal state until all observed outputs
                are generated.
        Returns:
            Returns a random.Random() object.
        """

        result_state = None

        assert len(outputs) >= 624       # need at least 624 values

        ivals = []
        for i in range(624):
            ivals.append(self.untemper(outputs[i]))

        if len(outputs) >= 625:
            # We have additional outputs and can correctly
            # recover the internal index by bruteforce
            challenge = outputs[624]
            for i in range(1, 626):
                state = (3, tuple(ivals+[i]), None)
                r = random.Random()
                r.setstate(state)

                if challenge == r.getrandbits(32):
                    result_state = state
                    break
        else:
            # With only 624 outputs we assume they were the first observed 624
            # outputs after a twist -->  we set the internal index to 624.
            result_state = (3, tuple(ivals+[624]), None)

        rand = random.Random()
        rand.setstate(result_state)

        if forward:
            for i in range(624, len(outputs)):
                assert rand.getrandbits(32) == outputs[i]

        return rand

a = [1214308699, 2315715347, 3798261137, 3309683928, 453589404, 1961627900, 3575179829, 3111591501, 675648244, 46309333, 3638111187, 3651098078, 1213290376, 451916480, 3088683742, 2579787411, 2821100885, 1831531174, 621490809, 2268023413, 1279608773, 3484194448, 3372007611, 1048600367, 296590851, 2109413974, 1846678822, 2870304787, 2008479496, 522073899, 1514842090, 4292321045, 555468282, 227883123, 2713208911, 485332065, 149046080, 4177849899, 3477348741, 691757942, 711260050, 3566287924, 3111377085, 1848149701, 2603605656, 3233381451, 1825602766, 1001074637, 2254606889, 4255709406, 1417791268, 240377470, 1916878506, 3163097988, 427898129, 1585568397, 386392312, 3171132215, 4129325278, 2899297575, 3092874671, 1746439759, 4127702037, 422517298, 1224531548, 2711029533, 1707799757, 1319027609, 303068555, 489163838, 451959772, 2296473828, 2496027497, 3499301345, 3403797395, 2255765003, 2730574756, 3875239313, 1090691250, 1560510825, 2869091773, 3461042815, 1295894172, 3958218023, 2264468864, 4223270509, 911020399, 320715540, 657203318, 1116421175, 179971258, 1818033618, 483727458, 2748786281, 2242077076, 2393926956, 2113686191, 3874279892, 868497119, 2015409539, 3209689757, 1884195212, 1935188440, 2787334471, 1809301880, 1010384417, 1888092097, 2150000984, 4205811845, 3113525506, 1723529594, 854565641, 3262114591, 1198808260, 3147918780, 2145432222, 221960105, 244725894, 4179007603, 3290104709, 3768941189, 3400315000, 3532917162, 1224926938, 53359512, 1427324306, 2564455969, 1936092191, 3977465559, 3687006575, 4039894205, 388781272, 3188602508, 1317415962, 3244174148, 606817152, 823932141, 822676646, 2380748935, 3325451398, 2291969956, 1078023982, 1508908811, 2705031142, 1316821241, 201182234, 3882747154, 2284919364, 338205299, 4155380296, 3924796998, 857558042, 1114857106, 2028012085, 3882177273, 236952211, 161793826, 3643976491, 4089592326, 1500231544, 1696260120, 1024969461, 915482081, 3072880454, 2468894669, 2155374950, 796754745, 4005980533, 25638133, 1022137242, 1427006706, 3844980411, 2654459319, 3981830196, 1386300703, 1293351725, 3626899268, 2681322699, 758862799, 3859717911, 375175048, 488760739, 396988054, 3862092458, 1783732627, 798771405, 3645267651, 285977739, 2967233511, 947281884, 3755581397, 3836409821, 116437053, 527919833, 3644667961, 611045845, 2562859262, 4133148688, 3235757239, 4144815019, 1963337999, 4201519449, 2369496848, 2698845752, 1127079264, 3287894711, 2037423450, 2106904631, 3133523523, 1885589531, 591865665, 182340081, 2154784437, 73856535, 691320100, 16295633, 984933876, 3655350280, 2339931563, 34607594, 3452716226, 2754331638, 1381471299, 1086925759, 2357402991, 4243625975, 2295874836, 2372190387, 4285775731, 2586608829, 660506163, 1749130747, 1916121322, 1461383100, 1277392426, 3390567188, 1440771267, 1030458550, 3023997502, 2479094426, 2043598751, 1874287085, 2262824804, 3685537750, 2410607730, 3666503624, 3854766412, 3914718457, 562582616, 3445633593, 1510228516, 3295258011, 1026342151, 1534531548, 2056404449, 2698110400, 3965337748, 2441929073, 102455976, 1016776592, 759629242, 3826138499, 1120697365, 3931471981, 2991251236, 534892683, 2887463941, 372471605, 549124047, 961345371, 1785655822, 783384381, 3865642587, 3501354113, 3896299378, 2847987034, 4009720990, 2520068877, 2784329370, 1528999022, 86484159, 3838132277, 2460538588, 105524002, 2163100545, 1219389908, 3836962754, 396433876, 2641543294, 1983387824, 216771009, 2853177247, 4223983114, 507080777, 2942869897, 2417787756, 3331519272, 1030559734, 1246630035, 2690323756, 4122720192, 3295675373, 3939838917, 2457005110, 3397254890, 148332030, 3022868849, 1140174956, 2275999264, 1456837016, 3356352888, 458278605, 3679323768, 3664368860, 1051689297, 1664353061, 3551749111, 2851752512, 2173475880, 824888998, 4170043329, 905610328, 4288416509, 304339515, 1780195406, 3075096156, 2329733439, 1923357061, 2381853156, 3048319469, 736718045, 367025226, 36481423, 779715081, 3660484931, 1255061157, 1451581040, 545686943, 1192617062, 2157989560, 305001199, 1304655797, 3320567349, 3209205988, 350483841, 359137653, 1083815141, 1238282921, 3223688763, 3110259629, 1767499815, 1182053894, 2964752323, 1293691050, 2503074131, 3493362838, 193722702, 2086642114, 719589846, 3511097489, 3892298789, 256528585, 1550213212, 1539862979, 1389759679, 1411144065, 1735199268, 325598479, 3630700853, 3513128393, 287165058, 3072167891, 2693012850, 1026834943, 2103169608, 457106483, 4273426895, 2512203176, 2543281134, 2781412629, 1578497045, 215928026, 4136071295, 760010685, 1030574680, 956322242, 1546876552, 2927762785, 735737613, 3094660905, 2280926944, 754931316, 1419112709, 2054349817, 4238902882, 442833098, 1966794135, 1060227263, 1871713320, 1130879290, 2702463764, 1510703596, 2304847468, 2593849791, 2897784418, 1183478649, 3462033147, 2709292869, 555129754, 1042441088, 3592928868, 3983497091, 1080927832, 4129371896, 2759327084, 3348179755, 1427797833, 3581821490, 3099604494, 2641614760, 4095412026, 718532998, 65545632, 320401168, 1073404958, 82124817, 720705335, 3552741473, 2911706612, 2132597172, 1535708351, 3583851852, 1136132142, 3095375274, 2036269997, 1207595643, 1370483812, 1898737729, 1756163751, 1247041476, 437285143, 4251015679, 1110939028, 4130237641, 3814791348, 3787535577, 2732181606, 527411572, 3935599220, 3974403817, 1480549208, 180220491, 3798126766, 833445687, 3362301917, 3297586015, 2490647232, 1337963561, 48933866, 322410156, 3245475226, 2373205704, 1002799318, 2649343091, 1109038107, 3735681538, 752678866, 2143619243, 3748165959, 460788868, 1816668026, 1784944790, 2450774596, 3800123422, 1063996602, 1237038609, 2755104641, 2180356153, 3037774157, 604717837, 2085839768, 1194802952, 176436137, 2666175695, 4107553110, 3883145177, 1639767006, 1196434983, 1218613980, 2510940978, 2325235948, 3094892517, 1955278305, 2972995130, 778330515, 3496662134, 3617548529, 963745838, 2385869192, 1555943307, 3600644887, 2758409891, 768875128, 3189963864, 1633836791, 955332037, 1928175461, 1096302566, 699573371, 2782858184, 419508156, 915192680, 767453409, 1849417370, 3992664309, 2285295296, 2508638425, 1867581169, 2301763729, 1673916514, 206887953, 2703562288, 3324384475, 2009593894, 410839930, 3091585159, 1552587998, 990692141, 136393914, 3224638171, 3788210927, 4138840186, 656077547, 3717512072, 1437450399, 1091224604, 2973423779, 1373231386, 666162598, 32275587, 459059290, 3232831601, 1401852115, 1949509908, 1421529505, 1790817555, 877120559, 2729972322, 252923574, 3928060128, 1032473545, 3821655413, 3756218827, 3587259043, 2646548978, 171026992, 2593064377, 95763080, 707534097, 2362081519, 1757490218, 2965926232, 3266382929, 3884547078, 172238448, 4241595904, 4280194602, 3255403365, 1494383266, 4073351659, 2386076156, 35618048, 1325253564, 1525637901, 424489180, 3464007417, 3403689219, 241721236, 1036213901, 3807618863, 3259215653, 293906920, 967431690, 103295594, 3921831885, 750923831, 2660895265, 717452559, 3186899908, 2680228750, 4238132175, 596366418, 2613605545, 2186420696, 1132651626, 3070447531, 2715763893, 4206728693, 921291103, 1594591039, 237686507, 2119237796, 4041229458, 753267331, 4201337974, 3166678791, 254066057, 1574355749, 755495020, 1194803596, 2494881666, 113386886, 3368692299, 911502232, 3891261553, 2729287854, 2005558771, 302628624, 2236936528, 186301537, 3668753208, 1990167487, 1024209367, 2281842149]
mtb = MT19937Recover()
rnd = mtb.go(a)

print(rnd.getstate())
idxs = [i for i in range(38)]
rnd.shuffle(idxs)
trans = {i: idxs.index(i) for i in range(38)}

vals = [0x1F,0x00,0x0B,0x10,0x48,0x46,0x44,0x50,0x0B,0x00,0x3B,0x18,0x14,0x07,0x13,0x4F,0x50,0x1E,0x59,0x25,0x04,0x3C,0x56,0x0B,0x18,0x57,0x03,0x17,0x4A,0x1E,0x4C,0x4B,0x57,0x50,0x14,0x06,0x0E,0x42]

b = [vals[trans[i]] for i in trans]
print(b)